const WithdrawalNotification = require('../models/WithdrawalNotification');
const Transaction = require('../models/Transaction');
const User = require('../models/User');

// T·∫°o th√¥ng b√°o r√∫t ti·ªÅn
const createWithdrawalNotification = async (req, res) => {
  try {
    const { transactionId, userId, amount, bankInfo } = req.body;
    
    // T·∫°o m√£ giao d·ªãch ng·∫´u nhi√™n
    const transactionCode = 'WD' + Date.now() + Math.random().toString(36).substr(2, 5).toUpperCase();
    
    // T·∫°o n·ªôi dung th√¥ng b√°o
    const now = new Date();
    const formattedDate = now.toLocaleString('vi-VN', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    });
    
    const content = `C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa JBS.
Y√™u c·∫ßu r√∫t ti·ªÅn c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n v√† ƒëang trong qu√° tr√¨nh x√©t duy·ªát.

üïí Th·ªùi gian x·ª≠ l√Ω d·ª± ki·∫øn: t·ª´ 10 ƒë·∫øn 120 ph√∫t
üìå M√£ giao d·ªãch: ${transactionCode}
üìÖ Th·ªùi gian y√™u c·∫ßu: ${formattedDate}
üíµ S·ªë ti·ªÅn r√∫t: ${amount.toLocaleString('vi-VN')} VNƒê
üè¶ T√†i kho·∫£n nh·∫≠n: ${bankInfo.bankName}/${bankInfo.accountNumber}/${bankInfo.accountName}

‚∏ª

L∆∞u √Ω:
‚Äì Trong th·ªùi gian x√©t duy·ªát, b·∫°n kh√¥ng th·ªÉ ch·ªânh s·ª≠a ho·∫∑c h·ªßy y√™u c·∫ßu.
‚Äì B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o ngay khi l·ªánh r√∫t ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng.
‚Äì N·∫øu ph√°t sinh s·ª± c·ªë, ƒë·ªôi ng≈© JBS s·∫Ω li√™n h·ªá tr·ª±c ti·∫øp qua email ho·∫∑c s·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒëƒÉng k√Ω.`;

    const notification = new WithdrawalNotification({
      user: userId,
      transaction: transactionId,
      content,
      transactionCode,
      amount,
      bankInfo
    });
    
    await notification.save();
    res.status(201).json(notification);
  } catch (err) {
    res.status(400).json({ message: 'T·∫°o th√¥ng b√°o r√∫t ti·ªÅn th·∫•t b·∫°i', error: err.message });
  }
};

// L·∫•y t·∫•t c·∫£ th√¥ng b√°o r√∫t ti·ªÅn c·ªßa user
const getUserWithdrawalNotifications = async (req, res) => {
  try {
    const notifications = await WithdrawalNotification.find({ 
      user: req.user.id,
      expiresAt: { $gt: new Date() }
    })
    .populate('transaction', 'status createdAt')
    .sort({ createdAt: -1 });
    
    res.json(notifications);
  } catch (err) {
    res.status(500).json({ message: 'L·ªói server' });
  }
};

// L·∫•y t·∫•t c·∫£ th√¥ng b√°o r√∫t ti·ªÅn (admin only)
const getAllWithdrawalNotifications = async (req, res) => {
  try {
    const notifications = await WithdrawalNotification.find()
      .populate('user', 'name email')
      .populate('transaction', 'status createdAt')
      .sort({ createdAt: -1 });
    
    res.json(notifications);
  } catch (err) {
    res.status(500).json({ message: 'L·ªói server' });
  }
};

// ƒê√°nh d·∫•u th√¥ng b√°o ƒë√£ ƒë·ªçc
const markAsRead = async (req, res) => {
  try {
    const notification = await WithdrawalNotification.findByIdAndUpdate(
      req.params.id,
      { isRead: true },
      { new: true }
    );
    
    if (!notification) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y th√¥ng b√°o' });
    }
    
    res.json(notification);
  } catch (err) {
    res.status(500).json({ message: 'L·ªói server' });
  }
};

// X√≥a th√¥ng b√°o
const deleteWithdrawalNotification = async (req, res) => {
  try {
    const notification = await WithdrawalNotification.findByIdAndDelete(req.params.id);
    if (!notification) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y th√¥ng b√°o' });
    }
    res.json({ message: 'ƒê√£ x√≥a th√¥ng b√°o' });
  } catch (err) {
    res.status(500).json({ message: 'L·ªói server' });
  }
};

// L·∫•y th√¥ng b√°o theo ID
const getWithdrawalNotificationById = async (req, res) => {
  try {
    const notification = await WithdrawalNotification.findById(req.params.id)
      .populate('transaction', 'status createdAt')
      .populate('user', 'name email');
      
    if (!notification) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y th√¥ng b√°o' });
    }
    
    res.json(notification);
  } catch (err) {
    res.status(500).json({ message: 'L·ªói server' });
  }
};

module.exports = {
  createWithdrawalNotification,
  getUserWithdrawalNotifications,
  getAllWithdrawalNotifications,
  markAsRead,
  deleteWithdrawalNotification,
  getWithdrawalNotificationById
}; 