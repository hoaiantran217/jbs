import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { toast } from 'react-hot-toast';
import { useUser } from '../contexts/UserContext';
import { 
  CheckCircleIcon, 
  XCircleIcon, 
  ClockIcon,
  CameraIcon,
  DocumentTextIcon,
  UserIcon
} from '@heroicons/react/24/outline';
import MobileDatePicker from '../components/MobileDatePicker';

const IdentityVerification = () => {
  const { user } = useUser();
  const [currentStep, setCurrentStep] = useState(1);
  const [loading, setLoading] = useState(false);
  const [verification, setVerification] = useState(null);
  const [formData, setFormData] = useState({
    fullName: '',
    dateOfBirth: '',
    idType: 'CCCD',
    idNumber: '',
    frontImage: '',
    backImage: ''
  });
  const BASE_URL = 'https://jbs-invest.onrender.com';

  // Fetch verification status
  const fetchVerificationStatus = async () => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.get(`${BASE_URL}/api/identity-verification/my-verification`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      if (response.data.success) {
        setVerification(response.data.data);
      }
    } catch (error) {
      console.error('Error fetching verification status:', error);
    }
  };

  useEffect(() => {
    fetchVerificationStatus();
  }, []);

  // Upload image
  const uploadImage = async (file, type) => {
    try {
      const formData = new FormData();
      formData.append('image', file);

      const token = localStorage.getItem('token');
      const response = await axios.post(`${BASE_URL}/api/identity-verification/upload-image`, formData, {
        headers: { 
          Authorization: `Bearer ${token}`,
          'Content-Type': 'multipart/form-data'
        }
      });

      if (response.data.success) {
        setFormData(prev => ({
          ...prev,
          [type]: response.data.data.url
        }));
        toast.success('T·∫£i ·∫£nh th√†nh c√¥ng');
      }
    } catch (error) {
      console.error('Error uploading image:', error);
      toast.error('L·ªói khi t·∫£i ·∫£nh');
    }
  };

  // Handle file upload
  const handleImageUpload = (e, type) => {
    const file = e.target.files[0];
    if (file) {
      if (file.size > 5 * 1024 * 1024) { // 5MB limit
        toast.error('K√≠ch th∆∞·ªõc ·∫£nh kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 5MB');
        return;
      }
      uploadImage(file, type);
    }
  };

  // Submit verification
  const handleSubmit = async () => {
    try {
      if (!formData.fullName || !formData.dateOfBirth || !formData.idNumber || !formData.frontImage || !formData.backImage) {
        toast.error('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin');
        return;
      }

      setLoading(true);
      const token = localStorage.getItem('token');
      await axios.post(`${BASE_URL}/api/identity-verification/submit`, formData, {
        headers: { Authorization: `Bearer ${token}` }
      });

      toast.success('G·ª≠i y√™u c·∫ßu x√°c minh th√†nh c√¥ng');
      fetchVerificationStatus();
      setCurrentStep(1);
      setFormData({
        fullName: '',
        dateOfBirth: '',
        idType: 'CCCD',
        idNumber: '',
        frontImage: '',
        backImage: ''
      });
    } catch (error) {
      console.error('Error submitting verification:', error);
      toast.error(error.response?.data?.message || 'L·ªói khi g·ª≠i y√™u c·∫ßu');
    } finally {
      setLoading(false);
    }
  };

  // Get status display
  const getStatusDisplay = () => {
    if (!verification) return null;

    if (verification.status === 'pending') {
      return (
        <div className="bg-gradient-to-br from-yellow-50 to-orange-50 border border-yellow-200 rounded-lg p-6">
          <div className="flex items-start space-x-4">
            <div className="flex-shrink-0">
              <ClockIcon className="w-8 h-8 text-yellow-500" />
            </div>
            <div className="flex-1">
              <h3 className="text-lg font-semibold text-yellow-800 mb-2">
                Th√¥ng tin c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c x√°c minh
              </h3>
              <p className="text-yellow-700 mb-4">
                C·∫£m ∆°n b·∫°n ƒë√£ ho√†n t·∫•t b∆∞·ªõc g·ª≠i th√¥ng tin x√°c minh danh t√≠nh.
              </p>
              
              <div className="bg-white rounded-lg p-4 mb-4 border border-yellow-100">
                <p className="text-sm text-gray-700 mb-3">
                  ƒê·ªôi ng≈© JBS ƒëang ti·∫øn h√†nh ki·ªÉm tra v√† x·ª≠ l√Ω h·ªì s∆° c·ªßa b·∫°n.
                  ƒê√¢y l√† b∆∞·ªõc c·∫ßn thi·∫øt ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n v√† tu√¢n th·ªß c√°c quy ƒë·ªãnh b·∫£o m·∫≠t th√¥ng tin.
                </p>
                
                <div className="space-y-2 text-sm">
                  <div className="flex items-center space-x-2">
                    <span className="text-yellow-600">üïí</span>
                    <span className="text-gray-700">Th·ªùi gian x·ª≠ l√Ω d·ª± ki·∫øn: trong v√≤ng 5 ‚Äì 24 gi·ªù l√†m vi·ªác.</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <span className="text-yellow-600">üì©</span>
                    <span className="text-gray-700">K·∫øt qu·∫£ x√°c minh s·∫Ω ƒë∆∞·ª£c th√¥ng b√°o qua email ho·∫∑c trong ·ª©ng d·ª•ng JBS.</span>
                  </div>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                  <div className="flex items-center space-x-2 mb-2">
                    <CheckCircleIcon className="w-5 h-5 text-green-500" />
                    <h4 className="font-semibold text-green-800">‚úÖ Tr∆∞·ªùng h·ª£p th√†nh c√¥ng</h4>
                  </div>
                  <p className="text-sm text-green-700">
                    T√†i kho·∫£n c·ªßa b·∫°n s·∫Ω ƒë∆∞·ª£c x√°c minh v√† c√≥ th·ªÉ truy c·∫≠p ƒë·∫ßy ƒë·ªß c√°c t√≠nh nƒÉng JBS.
                  </p>
                </div>
                
                <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                  <div className="flex items-center space-x-2 mb-2">
                    <XCircleIcon className="w-5 h-5 text-red-500" />
                    <h4 className="font-semibold text-red-800">‚ùå Tr∆∞·ªùng h·ª£p t·ª´ ch·ªëi</h4>
                  </div>
                  <p className="text-sm text-red-700">
                    B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o l√Ω do v√† h∆∞·ªõng d·∫´n th·ª±c hi·ªán l·∫°i.
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      );
    }

    if (verification.status === 'approved') {
      return (
        <div className="bg-gradient-to-br from-green-50 to-emerald-50 border border-green-200 rounded-lg p-6">
          <div className="flex items-start space-x-4">
            <div className="flex-shrink-0">
              <CheckCircleIcon className="w-8 h-8 text-green-500" />
            </div>
            <div className="flex-1">
              <h3 className="text-lg font-semibold text-green-800 mb-2">
                üéâ T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c minh th√†nh c√¥ng
              </h3>
              <p className="text-green-700 mb-3">
                Ch√∫c m·ª´ng! Qu√° tr√¨nh x√°c minh danh t√≠nh c·ªßa b·∫°n ƒë√£ ho√†n t·∫•t.
              </p>
              <p className="text-green-700">
                B·∫°n hi·ªán c√≥ th·ªÉ truy c·∫≠p ƒë·∫ßy ƒë·ªß c√°c t√≠nh nƒÉng v√† d·ªãch v·ª• c·ªßa JBS.
              </p>
              {verification.processedAt && (
                <p className="text-sm text-green-600 mt-3">
                  X√°c minh th√†nh c√¥ng v√†o {new Date(verification.processedAt).toLocaleDateString('vi-VN')}
                </p>
              )}
            </div>
          </div>
        </div>
      );
    }

    if (verification.status === 'rejected') {
      return (
        <div className="bg-gradient-to-br from-red-50 to-pink-50 border border-red-200 rounded-lg p-6">
          <div className="flex items-start space-x-4">
            <div className="flex-shrink-0">
              <XCircleIcon className="w-8 h-8 text-red-500" />
            </div>
            <div className="flex-1">
              <h3 className="text-lg font-semibold text-red-800 mb-2">
                ‚ö†Ô∏è X√°c minh kh√¥ng th√†nh c√¥ng
              </h3>
              <p className="text-red-700 mb-4">
                Ch√∫ng t√¥i r·∫•t ti·∫øc! H·ªì s∆° x√°c minh c·ªßa b·∫°n ch∆∞a ƒë√°p ·ª©ng ƒë·ªß y√™u c·∫ßu.
              </p>
              
              {verification.adminNotes && (
                <div className="bg-white rounded-lg p-4 mb-4 border border-red-100">
                  <h4 className="font-semibold text-red-800 mb-2">üìù L√Ω do t·ª´ ch·ªëi:</h4>
                  <p className="text-sm text-gray-700">{verification.adminNotes}</p>
                </div>
              )}

              <div className="bg-white rounded-lg p-4 mb-4 border border-red-100">
                <h4 className="font-semibold text-red-800 mb-3">üëâ Vui l√≤ng th·ª±c hi·ªán l·∫°i b∆∞·ªõc x√°c minh:</h4>
                <div className="space-y-2 text-sm text-gray-700">
                  <div className="flex items-start space-x-2">
                    <span className="text-red-600 font-bold">1.</span>
                    <span>Chu·∫©n b·ªã gi·∫•y t·ªù h·ª£p l·ªá (CCCD, h·ªô chi·∫øu, v.v.)</span>
                  </div>
                  <div className="flex items-start space-x-2">
                    <span className="text-red-600 font-bold">2.</span>
                    <span>ƒê·∫£m b·∫£o h√¨nh ·∫£nh r√µ n√©t, kh√¥ng b·ªã l√≥a ho·∫∑c che khu·∫•t</span>
                  </div>
                  <div className="flex items-start space-x-2">
                    <span className="text-red-600 font-bold">3.</span>
                    <span>T·∫£i l·∫°i th√¥ng tin qua m·ª•c "X√°c minh t√†i kho·∫£n"</span>
                  </div>
                </div>
              </div>

              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                <p className="text-sm text-blue-700">
                  üì© N·∫øu b·∫°n c·∫ßn h·ªó tr·ª£ th√™m, ƒë·ª´ng ng·∫ßn ng·∫°i li√™n h·ªá chƒÉm s√≥c kh√°ch JBS tr·ª±c tuy·∫øn.
                </p>
              </div>
            </div>
          </div>
        </div>
      );
    }

    return null;
  };

  // If user is already verified
  if (user?.isVerified) {
    return (
      <div className="max-w-4xl mx-auto p-6">
        <div className="text-center">
          <CheckCircleIcon className="w-16 h-16 text-green-500 mx-auto mb-4" />
          <h1 className="text-2xl font-bold text-gray-800 mb-2">T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c x√°c minh</h1>
          <p className="text-gray-600">B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng ƒë·∫ßy ƒë·ªß c√°c t√≠nh nƒÉng c·ªßa h·ªá th·ªëng</p>
        </div>
      </div>
    );
  }

  // If verification exists, show status
  if (verification) {
    return (
      <div className="max-w-4xl mx-auto p-6 bg-white rounded-lg">
        <div className="mb-8">
          <h1 className="text-2xl font-bold text-gray-800 mb-2">X√°c minh danh t√≠nh</h1>
          <p className="text-gray-600">Tr·∫°ng th√°i y√™u c·∫ßu x√°c minh c·ªßa b·∫°n</p>
        </div>

        {getStatusDisplay()}

        {verification.status === 'rejected' && (
          <div className="mt-6">
            <button
              onClick={() => {
                setVerification(null);
                setCurrentStep(1);
              }}
              className="px-6 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors"
            >
              G·ª≠i l·∫°i y√™u c·∫ßu x√°c minh
            </button>
          </div>
        )}
      </div>
    );
  }

  return (
    <div className="max-w-4xl h-full my-4 m-auto p-4 md:p-6 bg-white rounded-lg">
      <div className="mb-8">
        <h1 className="text-2xl font-bold text-gray-800 mb-2 text-center md:text-left">X√°c minh danh t√≠nh</h1>
        <p className="text-gray-600 text-center md:text-left">Ho√†n t·∫•t x√°c minh t√†i kho·∫£n ƒë·ªÉ s·ª≠ d·ª•ng ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng</p>
      </div>

      {/* Progress Steps */}
      <div className="mb-8">
        <div className="flex items-center justify-between">
          <div className={`flex-1 md:flex-row flex-col items-center ${currentStep >= 1 ? 'text-blue-600' : 'text-gray-400'}`}>
            <div className={`w-8 h-8 rounded-full flex items-center justify-center ${currentStep >= 1 ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}>
              1
            </div>
            <span className=" text-center md:text-left text-sm md:text-base">Th√¥ng tin c√° nh√¢n</span>
          </div>
          <div className={`flex-1 h-1 mx-2 md:mx-4 ${currentStep >= 2 ? 'bg-blue-600' : 'bg-gray-200'}`}></div>
          <div className={`flex-1 md:flex-row flex-col items-center ${currentStep >= 2 ? 'text-blue-600' : 'text-gray-400'}`}>
            <div className={`w-8 h-8 rounded-full flex items-center justify-center ${currentStep >= 2 ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}>
              2
            </div>
            <span className=" text-center md:text-left text-sm md:text-base">Gi·∫•y t·ªù t√πy th√¢n</span>
          </div>
          <div className={`flex-1 h-1 mx-2 md:mx-4 ${currentStep >= 3 ? 'bg-blue-600' : 'bg-gray-200'}`}></div>
          <div className={`flex-1 md:flex-row flex-col items-center ${currentStep >= 3 ? 'text-blue-600' : 'text-gray-400'}`}>
            <div className={`w-8 h-8 rounded-full flex items-center justify-center ${currentStep >= 3 ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}>
              3
            </div>
            <span className=" text-center md:text-left text-sm md:text-base">G·ª≠i y√™u c·∫ßu</span>
          </div>
        </div>
      </div>

      {/* Step 1: Personal Information */}
      {currentStep === 1 && (
        <div className="bg-white rounded-lg shadow-md p-6">
          <h2 className="text-xl font-semibold mb-4 flex items-center">
            <UserIcon className="w-6 h-6 mr-2" />
            Th√¥ng tin c√° nh√¢n
          </h2>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                H·ªç v√† t√™n
              </label>
              <input
                type="text"
                value={formData.fullName}
                onChange={(e) => setFormData({...formData, fullName: e.target.value})}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Nh·∫≠p h·ªç v√† t√™n ƒë·∫ßy ƒë·ªß"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Ng√†y sinh
              </label>
              <MobileDatePicker
                value={formData.dateOfBirth}
                onChange={(value) => setFormData({...formData, dateOfBirth: value})}
                className="w-full"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Lo·∫°i gi·∫•y t·ªù
              </label>
              <select
                value={formData.idType}
                onChange={(e) => setFormData({...formData, idType: e.target.value})}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="CCCD">CƒÉn c∆∞·ªõc c√¥ng d√¢n</option>
                <option value="CMND">Ch·ª©ng minh nh√¢n d√¢n</option>
                <option value="PASSPORT">H·ªô chi·∫øu</option>
              </select>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                S·ªë gi·∫•y t·ªù
              </label>
              <input
                type="text"
                value={formData.idNumber}
                onChange={(e) => setFormData({...formData, idNumber: e.target.value})}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Nh·∫≠p s·ªë gi·∫•y t·ªù"
              />
            </div>
          </div>
          
          <div className="mt-6">
            <button
              onClick={() => setCurrentStep(2)}
              disabled={!formData.fullName || !formData.dateOfBirth || !formData.idNumber}
              className="px-6 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors disabled:bg-gray-300 disabled:cursor-not-allowed"
            >
              Ti·∫øp t·ª•c
            </button>
          </div>
        </div>
      )}

      {/* Step 2: ID Documents */}
      {currentStep === 2 && (
        <div className="bg-white rounded-lg shadow-md p-6">
          <h2 className="text-xl font-semibold mb-4 flex items-center">
            <DocumentTextIcon className="w-6 h-6 mr-2" />
            Gi·∫•y t·ªù t√πy th√¢n
          </h2>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Front Image */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                M·∫∑t tr∆∞·ªõc {formData.idType}
              </label>
              <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                {formData.frontImage ? (
                  <div>
                    <img src={formData.frontImage} alt="Front" className="w-full h-48 object-cover rounded" />
                    <button
                      onClick={() => setFormData({...formData, frontImage: ''})}
                      className="mt-2 text-red-600 text-sm"
                    >
                      X√≥a ·∫£nh
                    </button>
                  </div>
                ) : (
                  <div>
                    <CameraIcon className="w-12 h-12 text-gray-400 mx-auto mb-2" />
                    <p className="text-gray-600 mb-2">T·∫£i ·∫£nh m·∫∑t tr∆∞·ªõc</p>
                    <input
                      type="file"
                      accept="image/*"
                      onChange={(e) => handleImageUpload(e, 'frontImage')}
                      className="hidden"
                      id="frontImage"
                    />
                    <label htmlFor="frontImage" className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors cursor-pointer">
                      Ch·ªçn ·∫£nh
                    </label>
                  </div>
                )}
              </div>
            </div>

            {/* Back Image */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                M·∫∑t sau {formData.idType}
              </label>
              <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                {formData.backImage ? (
                  <div>
                    <img src={formData.backImage} alt="Back" className="w-full h-48 object-cover rounded" />
                    <button
                      onClick={() => setFormData({...formData, backImage: ''})}
                      className="mt-2 text-red-600 text-sm"
                    >
                      X√≥a ·∫£nh
                    </button>
                  </div>
                ) : (
                  <div>
                    <CameraIcon className="w-12 h-12 text-gray-400 mx-auto mb-2" />
                    <p className="text-gray-600 mb-2">T·∫£i ·∫£nh m·∫∑t sau</p>
                    <input
                      type="file"
                      accept="image/*"
                      onChange={(e) => handleImageUpload(e, 'backImage')}
                      className="hidden"
                      id="backImage"
                    />
                    <label htmlFor="backImage" className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors cursor-pointer">
                      Ch·ªçn ·∫£nh
                    </label>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* Warning */}
          <div className="mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
            <h3 className="font-semibold text-yellow-800 mb-2">L∆∞u √Ω quan tr·ªçng:</h3>
            <ul className="text-sm text-yellow-700 space-y-1">
              <li>‚Ä¢ ·∫¢nh ph·∫£i r√µ n√©t, kh√¥ng m·ªù ho·∫∑c b·ªã che khu·∫•t th√¥ng tin</li>
              <li>‚Ä¢ ƒê·∫£m b·∫£o t·∫•t c·∫£ th√¥ng tin tr√™n gi·∫•y t·ªù c√≥ th·ªÉ ƒë·ªçc ƒë∆∞·ª£c</li>
              <li>‚Ä¢ Ch√∫ng t√¥i cam k·∫øt b·∫£o m·∫≠t tuy·ªát ƒë·ªëi th√¥ng tin c·ªßa b·∫°n</li>
            </ul>
          </div>
          
          <div className="mt-6 flex gap-3">
            <button
              onClick={() => setCurrentStep(1)}
              className="px-6 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600 transition-colors"
            >
              Quay l·∫°i
            </button>
            <button
              onClick={() => setCurrentStep(3)}
              disabled={!formData.frontImage || !formData.backImage}
              className="px-6 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors disabled:bg-gray-300 disabled:cursor-not-allowed"
            >
              Ti·∫øp t·ª•c
            </button>
          </div>
        </div>
      )}

      {/* Step 3: Submit */}
      {currentStep === 3 && (
        <div className="bg-white rounded-lg shadow-md p-6">
          <h2 className="text-xl font-semibold mb-4">X√°c nh·∫≠n th√¥ng tin</h2>
          
          <div className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700">H·ªç v√† t√™n</label>
                <p className="text-gray-900">{formData.fullName}</p>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700">Ng√†y sinh</label>
                <p className="text-gray-900">{new Date(formData.dateOfBirth).toLocaleDateString('vi-VN')}</p>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700">Lo·∫°i gi·∫•y t·ªù</label>
                <p className="text-gray-900">{formData.idType}</p>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700">S·ªë gi·∫•y t·ªù</label>
                <p className="text-gray-900">{formData.idNumber}</p>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700">M·∫∑t tr∆∞·ªõc</label>
                <img src={formData.frontImage} alt="Front" className="w-full h-32 object-cover rounded" />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700">M·∫∑t sau</label>
                <img src={formData.backImage} alt="Back" className="w-full h-32 object-cover rounded" />
              </div>
            </div>
          </div>

          <div className="mt-6 flex gap-3">
            <button
              onClick={() => setCurrentStep(2)}
              className="px-6 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600 transition-colors"
            >
              Quay l·∫°i
            </button>
            <button
              onClick={handleSubmit}
              disabled={loading}
              className="px-6 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 transition-colors disabled:bg-gray-300 disabled:cursor-not-allowed"
            >
              {loading ? 'ƒêang g·ª≠i...' : 'G·ª≠i y√™u c·∫ßu x√°c minh'}
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default IdentityVerification; 